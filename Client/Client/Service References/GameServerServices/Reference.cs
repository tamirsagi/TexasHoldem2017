//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.GameServerServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/TexasHoldemDBWCF")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PwdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalMoneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pwd {
            get {
                return this.PwdField;
            }
            set {
                if ((object.ReferenceEquals(this.PwdField, value) != true)) {
                    this.PwdField = value;
                    this.RaisePropertyChanged("Pwd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalMoney {
            get {
                return this.TotalMoneyField;
            }
            set {
                if ((this.TotalMoneyField.Equals(value) != true)) {
                    this.TotalMoneyField = value;
                    this.RaisePropertyChanged("TotalMoney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayersInTable", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
    [System.SerializableAttribute()]
    public partial class PlayersInTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BalanceInTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPlayingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.GameServerServices.Hand PlayerHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PoistionInTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BalanceInTable {
            get {
                return this.BalanceInTableField;
            }
            set {
                if ((this.BalanceInTableField.Equals(value) != true)) {
                    this.BalanceInTableField = value;
                    this.RaisePropertyChanged("BalanceInTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPlaying {
            get {
                return this.IsPlayingField;
            }
            set {
                if ((this.IsPlayingField.Equals(value) != true)) {
                    this.IsPlayingField = value;
                    this.RaisePropertyChanged("IsPlaying");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.GameServerServices.Hand PlayerHand {
            get {
                return this.PlayerHandField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerHandField, value) != true)) {
                    this.PlayerHandField = value;
                    this.RaisePropertyChanged("PlayerHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PoistionInTable {
            get {
                return this.PoistionInTableField;
            }
            set {
                if ((this.PoistionInTableField.Equals(value) != true)) {
                    this.PoistionInTableField = value;
                    this.RaisePropertyChanged("PoistionInTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hand", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
    [System.SerializableAttribute()]
    public partial class Hand : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _sequenceField;
        
        private string _valueField;
        
        private Client.GameServerServices.Card[] Cardsk__BackingFieldField;
        
        private Client.GameServerServices.Hand.HandRanking Rankk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _sequence {
            get {
                return this._sequenceField;
            }
            set {
                if ((object.ReferenceEquals(this._sequenceField, value) != true)) {
                    this._sequenceField = value;
                    this.RaisePropertyChanged("_sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _value {
            get {
                return this._valueField;
            }
            set {
                if ((object.ReferenceEquals(this._valueField, value) != true)) {
                    this._valueField = value;
                    this.RaisePropertyChanged("_value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Cards>k__BackingField", IsRequired=true)]
        public Client.GameServerServices.Card[] Cardsk__BackingField {
            get {
                return this.Cardsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Cardsk__BackingFieldField, value) != true)) {
                    this.Cardsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Cardsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Rank>k__BackingField", IsRequired=true)]
        public Client.GameServerServices.Hand.HandRanking Rankk__BackingField {
            get {
                return this.Rankk__BackingFieldField;
            }
            set {
                if ((this.Rankk__BackingFieldField.Equals(value) != true)) {
                    this.Rankk__BackingFieldField = value;
                    this.RaisePropertyChanged("Rankk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Hand.HandRanking", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
        public enum HandRanking : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            RoyalFlush = 1000,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            StraightFlush = 900,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            FourOfAKind = 800,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            FullHouse = 700,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Flush = 600,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Straight = 500,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ThreeOfAKind = 400,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            TwoPair = 300,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            OnePair = 200,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            HigheCard = 100,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Default = 0,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private Client.GameServerServices.Card.FACE Facek__BackingFieldField;
        
        private Client.GameServerServices.Card.SUIT Suitk__BackingFieldField;
        
        private bool showk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Face>k__BackingField", IsRequired=true)]
        public Client.GameServerServices.Card.FACE Facek__BackingField {
            get {
                return this.Facek__BackingFieldField;
            }
            set {
                if ((this.Facek__BackingFieldField.Equals(value) != true)) {
                    this.Facek__BackingFieldField = value;
                    this.RaisePropertyChanged("Facek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Suit>k__BackingField", IsRequired=true)]
        public Client.GameServerServices.Card.SUIT Suitk__BackingField {
            get {
                return this.Suitk__BackingFieldField;
            }
            set {
                if ((this.Suitk__BackingFieldField.Equals(value) != true)) {
                    this.Suitk__BackingFieldField = value;
                    this.RaisePropertyChanged("Suitk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<show>k__BackingField", IsRequired=true)]
        public bool showk__BackingField {
            get {
                return this.showk__BackingFieldField;
            }
            set {
                if ((this.showk__BackingFieldField.Equals(value) != true)) {
                    this.showk__BackingFieldField = value;
                    this.RaisePropertyChanged("showk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Card.FACE", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
        public enum FACE : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ACEFirst = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            TWO = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            THREE = 3,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            FOUR = 4,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            FIVE = 5,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            SIX = 6,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            SEVEN = 7,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            EIGHT = 8,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            NINE = 9,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            TEN = 10,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            JACK = 11,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            QUEEN = 12,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            KING = 13,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ACE = 14,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Card.SUIT", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
        public enum SUIT : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            CLUBS = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            DIAMONDS = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            HEARTS = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            SPADES = 3,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Card.CardToPlayer", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
        public enum CardToPlayer : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            HAND = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            TABLE = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Table", Namespace="http://schemas.datacontract.org/2004/07/TexasHoldemDBWCF")]
    [System.SerializableAttribute()]
    public partial class Table : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdminIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BigBlindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayersInTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SmallBlindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TableIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdminId {
            get {
                return this.AdminIdField;
            }
            set {
                if ((this.AdminIdField.Equals(value) != true)) {
                    this.AdminIdField = value;
                    this.RaisePropertyChanged("AdminId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BigBlind {
            get {
                return this.BigBlindField;
            }
            set {
                if ((this.BigBlindField.Equals(value) != true)) {
                    this.BigBlindField = value;
                    this.RaisePropertyChanged("BigBlind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayers {
            get {
                return this.MaxPlayersField;
            }
            set {
                if ((this.MaxPlayersField.Equals(value) != true)) {
                    this.MaxPlayersField = value;
                    this.RaisePropertyChanged("MaxPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinAmount {
            get {
                return this.MinAmountField;
            }
            set {
                if ((this.MinAmountField.Equals(value) != true)) {
                    this.MinAmountField = value;
                    this.RaisePropertyChanged("MinAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayersInTable {
            get {
                return this.PlayersInTableField;
            }
            set {
                if ((this.PlayersInTableField.Equals(value) != true)) {
                    this.PlayersInTableField = value;
                    this.RaisePropertyChanged("PlayersInTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SmallBlind {
            get {
                return this.SmallBlindField;
            }
            set {
                if ((this.SmallBlindField.Equals(value) != true)) {
                    this.SmallBlindField = value;
                    this.RaisePropertyChanged("SmallBlind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((this.TableIDField.Equals(value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player.PlayerAction", Namespace="http://schemas.datacontract.org/2004/07/Game_Server")]
    public enum PlayerPlayerAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Check = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Call = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Raise = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllIn = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fold = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/", ConfigurationName="GameServerServices.IGameServerServices", CallbackContract=typeof(Client.GameServerServices.IGameServerServicesCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGameServerServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Regist" +
            "er", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Regist" +
            "erResponse")]
        bool Register(string firstName, string lastNAme, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Login", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/LoginR" +
            "esponse")]
        Client.GameServerServices.Player Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Create" +
            "NewTable", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Create" +
            "NewTableResponse")]
        int CreateNewTable(string tableName, int minAmount, int smallBlind, int bigBlind, int adminId, int amountToPlay);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Delete" +
            "Table", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Delete" +
            "TableResponse")]
        bool DeleteTable(int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/JoinIn" +
            "toTable", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/JoinIn" +
            "toTableResponse")]
        Client.GameServerServices.PlayersInTable[] JoinIntoTable(int tableId, int playerId, int initialAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/LeaveT" +
            "able", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/LeaveT" +
            "ableResponse")]
        void LeaveTable(int tableId, int playerId, bool wasKicked);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/GetAll" +
            "GamesTables", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/GetAll" +
            "GamesTablesResponse")]
        Client.GameServerServices.Table[] GetAllGamesTables();
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/GetCur" +
            "rentBalance", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/GetCur" +
            "rentBalanceResponse")]
        int GetCurrentBalance(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Update" +
            "Balance", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Update" +
            "BalanceResponse")]
        void UpdateBalance(int playerId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/SendCh" +
            "atMessage", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/SendCh" +
            "atMessageResponse")]
        void SendChatMessage(int tableId, string sender, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Player" +
            "IsReadyToPlay", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Player" +
            "IsReadyToPlayResponse")]
        void PlayerIsReadyToPlay(int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Check", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/CheckR" +
            "esponse")]
        void Check(int tableId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Fold", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/FoldRe" +
            "sponse")]
        void Fold(int tableId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Call", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/CallRe" +
            "sponse")]
        void Call(int tableId, int playerId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Raise", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/RaiseR" +
            "esponse")]
        void Raise(int tableId, int playerId, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/KickPl" +
            "ayer", ReplyAction="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/KickPl" +
            "ayerResponse")]
        void KickPlayer(int tableId, int playerIdToKick);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServerServicesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayerJoinedTable")]
        void NotifyPlayerJoinedTable(Client.GameServerServices.PlayersInTable player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "BlindsChanged")]
        void NotifyBlindsChanged(int smallBlind, int bigBlind);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayersRules")]
        void NotifyPlayersRules(int smallBlindId, int bigBlindId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayerLeftTable")]
        void NotifyPlayerLeftTable(string playerName, int position, bool wasKicked);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "NextPlayerToPlay")]
        void NotifyNextPlayerToPlay(string playerToPlay, int minAmountToBet, int currentPlayerBalance, int pot);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayerFold")]
        void NotifyPlayerFold(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/SendCa" +
            "rdToPlayer")]
        void SendCardToPlayer(Client.GameServerServices.Card card, Client.GameServerServices.Card.CardToPlayer cardToPlayer, int position);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Update" +
            "MessageInChat")]
        void UpdateMessageInChat(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayerKicked")]
        void NotifyPlayerKicked();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "PlayerAction")]
        void NotifyPlayerAction(string userName, Client.GameServerServices.PlayerPlayerAction action, int amount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Reveal" +
            "CardsOnTable")]
        void RevealCardsOnTable(Client.GameServerServices.PlayersInTable player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="net.tcp://10.0.0.1:8988/Game_Server/GameServerServices/IGameServerServices/Notify" +
            "Winners")]
        void NotifyWinners(Client.GameServerServices.PlayersInTable[] winners);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServerServicesChannel : Client.GameServerServices.IGameServerServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServerServicesClient : System.ServiceModel.DuplexClientBase<Client.GameServerServices.IGameServerServices>, Client.GameServerServices.IGameServerServices {
        
        public GameServerServicesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServerServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServerServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerServicesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Register(string firstName, string lastNAme, string userName, string password) {
            return base.Channel.Register(firstName, lastNAme, userName, password);
        }
        
        public Client.GameServerServices.Player Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public int CreateNewTable(string tableName, int minAmount, int smallBlind, int bigBlind, int adminId, int amountToPlay) {
            return base.Channel.CreateNewTable(tableName, minAmount, smallBlind, bigBlind, adminId, amountToPlay);
        }
        
        public bool DeleteTable(int tableId) {
            return base.Channel.DeleteTable(tableId);
        }
        
        public Client.GameServerServices.PlayersInTable[] JoinIntoTable(int tableId, int playerId, int initialAmount) {
            return base.Channel.JoinIntoTable(tableId, playerId, initialAmount);
        }
        
        public void LeaveTable(int tableId, int playerId, bool wasKicked) {
            base.Channel.LeaveTable(tableId, playerId, wasKicked);
        }
        
        public Client.GameServerServices.Table[] GetAllGamesTables() {
            return base.Channel.GetAllGamesTables();
        }
        
        public int GetCurrentBalance(int playerId) {
            return base.Channel.GetCurrentBalance(playerId);
        }
        
        public void UpdateBalance(int playerId, int amount) {
            base.Channel.UpdateBalance(playerId, amount);
        }
        
        public void SendChatMessage(int tableId, string sender, string msg) {
            base.Channel.SendChatMessage(tableId, sender, msg);
        }
        
        public void PlayerIsReadyToPlay(int tableId) {
            base.Channel.PlayerIsReadyToPlay(tableId);
        }
        
        public void Check(int tableId, int playerId) {
            base.Channel.Check(tableId, playerId);
        }
        
        public void Fold(int tableId, int playerId) {
            base.Channel.Fold(tableId, playerId);
        }
        
        public void Call(int tableId, int playerId, int amount) {
            base.Channel.Call(tableId, playerId, amount);
        }
        
        public void Raise(int tableId, int playerId, int amount) {
            base.Channel.Raise(tableId, playerId, amount);
        }
        
        public void KickPlayer(int tableId, int playerIdToKick) {
            base.Channel.KickPlayer(tableId, playerIdToKick);
        }
    }
}
